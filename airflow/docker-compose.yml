---
version: '3.7'

x-airflow-common: &airflow-common
  image: apache/airflow:2.6.3
  env_file: &airflow-common-env .env
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/webserver_config.py:/opt/airflow/webserver_config.py
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /etc/letsencrypt:/etc/letsencrypt
  networks: &airflow-networks
    - airflow
    - clickhouse
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15.2
    container_name: airflow-db
    restart: always
    env_file: *airflow-common-env
    volumes:
      - postgres:/var/lib/postgresql/data
    networks: *airflow-networks
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.0.10
    container_name: airflow-cache
    restart: always
    volumes:
      - redis:/data
    networks: *airflow-networks
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    networks: *airflow-networks
    healthcheck:
      test: ["CMD", "curl", "--fail", "-k", "https://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 120s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    networks: *airflow-networks
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    networks: *airflow-networks
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 60s
      timeout: 60s
      retries: 10
      start_period: 120s
    env_file: *airflow-common-env
    environment:
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 60s
      timeout: 60s
      retries: 10
      start_period: 120s
    restart: always
    networks: *airflow-networks
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    networks: *airflow-networks
    command:
      - /init-entrypoint.sh
    env_file: *airflow-common-env
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
      - ./init-entrypoint.sh:/init-entrypoint.sh

  airflow-cli:
    <<: *airflow-common
    env_file: *airflow-common-env
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    networks: *airflow-networks
    command:
      - -f
      - /dev/null
    entrypoint:
     - /usr/bin/tail

  flower:
    <<: *airflow-common
    command: celery flower
    env_file: *airflow-common-env
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "-k", "https://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: always
    networks: *airflow-networks
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres:
    driver: local-persist
    driver_opts:
      mountpoint: /opt/data_project/airflow/postgres
  redis:
    driver: local-persist
    driver_opts:
      mountpoint: /opt/data_project/airflow/redis

networks:
  airflow:
    name: airflow
  clickhouse:
    external: true
